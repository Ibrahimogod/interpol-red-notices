using System;
using System.Collections.Generic;
using System.Text;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace RED_Notice_App.Models
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using RedNotice;
    //
    //    var welcome = Welcome.FromJson(jsonString);
    public partial class Response
    {
        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("query")]
        public Query Query { get; set; }

        [JsonProperty("_embedded")]
        public Embedded Embedded { get; set; }

        [JsonProperty("_links")]
        public ResponseLinks Links { get; set; }
    }

    public partial class Embedded
    {
        [JsonProperty("notices")]
        public List<Notice> Notices { get; set; }
    }

    public partial class Notice
    {
        [JsonProperty("forename")]
        public string Forename { get; set; }

        [JsonProperty("date_of_birth")]
        public string DateOfBirth { get; set; }

        [JsonProperty("entity_id")]
        public string EntityId { get; set; }

        [JsonProperty("nationalities")]
        public List<string> Nationalities { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("_links")]
        public NoticeLinks Links { get; set; }

        public int Age
        {
            get => DateTime.Now.Year - Convert.ToDateTime(DateOfBirth).Year;
        }

        public string FullName { get => $"{Name} {Forename}"; }

        public string Country { get=> new RegionInfo(Nationalities[0]).DisplayName;}
    }

    public partial class NoticeLinks
    {
        [JsonProperty("self")]
        public Url Self { get; set; }

        [JsonProperty("images")]
        public Url Images { get; set; }

        [JsonProperty("thumbnail")]
        public Url Thumbnail { get; set; }
    }

    public partial class Url
    {
        [JsonProperty("href")]
        public string Href { get; set; }
    }

    public partial class ResponseLinks
    {
        [JsonProperty("self")]
        public Url Self { get; set; }

        [JsonProperty("first")]
        public Url First { get; set; }

        [JsonProperty("next")]
        public Url Next { get; set; }

        [JsonProperty("last")]
        public Url Last { get; set; }
    }

    public partial class Query
    {
        [JsonProperty("page")]
        public long Page { get; set; }

        [JsonProperty("resultPerPage")]
        public long ResultPerPage { get; set; }
    }

    public partial class Response
    {
        public static Response FromJson(string json) => JsonConvert.DeserializeObject<Response>(json, Converter.Settings);
    }

    public static partial class Serialize
    {
        public static string ToJson(this Response self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            //MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
